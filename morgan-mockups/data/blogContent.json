[
  {
    "title":"Last week at bootcamp, vol. 2",
    "publishedDate":"2017-02-17",
    "author":"Morgan",
    "postContent":"<p><strong>Theme of the week: MODEL</strong>. We'll be delving more into how the data we access from our view is accessed and manipulated, and where it lives.</p><p><strong>Monday</strong>: Content-wise, I'm in completely unfamiliar territory but thankfully I'm retaining information. Part of our reading was on JSON, which we've covered briefly in 201 but I just didn't get. After reading, lecture and lab, it's making more sense - by turning something into a JSON object, objects can be transported as strings, which are very portable. This process is a form of serialization, or translating data structures into formats that can easily be transferred or stored. The other part of our reading/lecture was on AJAX, which I could understand the use for - not stopping your program or reloading your page while getting or sending a server information needed for dynamic user interaction - but the specifics were fuzzier.</p><p>After lecture, 9.5 hours of sleep and some time with the MDN docs on <a href=\"https://developer.mozilla.org/en-US/docs/AJAX/Getting_Started\">AJAX</a> and the <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest\">XMLHttpRequest object</a>, I'm going to try to write out my explanation of it so far.</p><p>AJAX gives the client control over server communication. It requires a new instance of XMLHttpRequest object. An AJAX call is structured similarly to an HTTP request (or is it identical?). When a response from the server is received, whatever functionality that hinged on the response executes - mostly likely (always?), it is a callback function. This is similar to how we've built event handlers.</p><p>Note: Our instructor's suggestion is learning how to draw a diagram of the HTTP request/response cycle.</p><p><strong>Tuesday</strong>: Our big introduction to Node.js! I'm going to take a crack at parroting what we learned yesterday and see how I do. Returning to the MVC concept, Node can play the role of controller. Because Node is built on Chrome's JavaScript engine, it permits developers to write controllers in JavaScript. This is beneficial because the front-end scripting language can communicate more clearly with the controller. It also permits JavaScript developers to write their own controllers. Finally, it expands JavaScript's environment beyond the browser. For our class purpose, we are limiting our use of Node to creating a server and router that we can use to see our projects.</p><p><strong>Wednesday</strong>: As promised by our instructor and idle chatter from former students in the hall, my mind has been blown apart by the curriculum today. Our reading was seemingly innocuous - an introduction to SQL and some fun little exercises writing queries. But what that really signified was our move into interacting with and writing our own databases, while continuing to work with Node/Express as our controller. Thankfully, we'll be continuing this content into Thursday and I should have more to share tomorrow.</p><p><strong>Thursday</strong>: Emerging from what I've deemed &ldquo;the trough&rdquo; (aka the low point of learning) that I worked myself into Wednesday. I was mentally and physically spent on Wednesday, which didn't play well with throwing SQL onto the pile. But today while talking to classmates, I made a critical realization: that I'd combined the notions of a server and a database into one. Then, in class, I gained some clarity on how our server file (using Express) both receives AJAX calls from the front end and connects them to act on the database. We set the HTTP method in the AJAX calls in the JavaScript, which we can then use in server.js to call SQL queries. Phew. I'm definitely going to return to SQL soon because it's so exciting and I haven't yet done it justice.</p><p><strong>Friday</strong>: Fully out of the trough. But I'm starting to feel like I'm in Lost, where every truth I learn uncovers a whole new world with new rules I don't understand. Once I get a little insight, it's just enough to start the cycle again. Thankfully we spent some time clarifying the client - server - database relationships and - dare I say it? - I think I'm getting it. So of course, in keeping with the Lost theme, we also covered some major CS theories onto the pile: functional programming (specifically focusing on array methods) and closures. </p><p>Concepts and technologies:</p><ul><li>AJAX: remember that the asynchronous portion of AJAX is the return</li><li>JSON</li><li>HTTP request</li><li>Protocols in general:</li><ul><li>HTTP, postgres</li></ul><li>ES6</li><ul><li>let, const</li><li>Promises</li></ul><li>Node.js</li><li>Environment: the context in which software operates</li><li>CRUD, as seen elsewhere:</li><ul><li>SQL (INSERT, SELECT, UPDATE, DELETE) </li><li>REST/HTTP (POST, GET, PUT, DELETE)</li></ul><li>SQL</li><li>Relational databases</li><li>Middleware: software that intercepts data in the request/response cycle and does something to it - verifies, alters/prepares</li><li>Functional programming</li><ul><li>Pure/stateless functions</li><li>Higher order functions</li></ul><li>Closures</li><ul><li>Using IIFEs to scope variables</li></ul></ul><p>Interesting tidbits:</p><ul><li>HTTP request methods are named semantically, but their meaning is not enforced by the protocol</li></ul><p>Things to follow up on:</p><ul><li>REST: representational state of transfer</li><li>AJAX calls vs. HTTP request/response - same?</li><li>Promises and methods (.then(), etc)</li><li>Functional programming</li><li>Data structures</li></ul>",
    "category":"code fellows,301,week in review"

  },
  {
    "title":"Last week at bootcamp, vol. 1",
    "publishedDate":"2017-02-12",
    "author":"Morgan",
    "postContent":"<p><strong>This week's theme is VIEW</strong>We were introduced to the Model, View, Controller concept and we're focusing on the View.</p><p><strong>Monday</strong>: SNOW DAY! I just wasn’t ready to face going back to school yet after an amazing week off, and the weather obliged.</p><p><strong>Tuesday</strong>: This day was packed. We got our intro to jQuery. (Wow, have I really been hearing about jQuery for 6 years now? I met up with a former coworker of mine and he said jQuery is on the wane as more and more people are using React and Angular. Something to keep in mind!) Boy, does jQuery make everything difficult about 201 easier. Also got an intro to Model, View Controller concept. Mobile first design and development, specifically using media queries and responsive design techniques like flexible layouts. We're going to have one larger on-going personal project this class, which is this very blog! How meta.</p><p><strong>Wednesday</strong>: Assignment is (responsive) design and data modeling for our on-going portfolio project. It’s hard to remember to mobile first when you're working on a laptop! More discussion of jQuery, SMACSS to organize our CSS.</p><p><strong>Thursday</strong>: Events with jQuery (use .on();) including a discussion on callback functions, event propagation, bubbling and delegation. Intro into templating. We’re starting by hiding a chunk of boilerplate HTML, then get it, copy it, populate it and push it back out to the DOM. Data attribute.</p><p><strong>Friday</strong>: This was a doozy of a day, with two lectures and two labs. On the templating front, we started with Handlebars.js, which you can call from a CDN. Then, instead of hiding and copying a chunk of HTML, you can create a Handlebars template within a script tag. I like to run what we’re using in class by the devs I’ve worked with previously and my buddy Arthur’s take on Handlebars is that it’s not as widely used as it was a few years ago. Sometimes our class feels like a history lesson - things move so quickly in technology, and get so abstracted, that it’s better to start with older technology (to a point). Our second lab was in class, and we built a page that will take in new content and make a JSON object to be copied into our js content file. I know once we get to the “model” portion of MVC, this will be a lot more compelling of a feature!</p><h3>Technologies used:</h3><ul><li>Libraries</li><li>jQuery</li><li>Handlebars</li><li>SMACSS</li></ul><h3>Concepts and theories:</h3><ul><li>Model, view, controller (MVC)</li><li>Responsive design<ul><li>Media queries</li><li>Flexible layouts</li></ul></li></ul><h3>Interesting tidbits:</h3><ul><li>Callback function: a function that is passed to another function as an argument</li><li>Data attribute - stores custom data in HTML and doesn’t require JavaScript calls.</li><li>Abstraction: taking a complex system and creating a simpler set of rules to interact with it</li><li>Computers: electrical current - binary - hex - machine language - OS - browser - HTML/CSS/JS - jQuery</li><li>Event delegation: registering an event on one element and affecting another element</li><li>Ternary operator: condition ? true : false;</li><li>Stack trace: tree of errors</li></ul><h3>Things to follow up </h3><ul><li>MVC</li><li>Single-page application - is this still used? linking strategies?</li><li>Regex</li><li>For loop in object constructor, seen in lab 5</li><li>How to organize, scope and call multiple js files</li></ul>",
    "category":"code fellows,301,week in review"
  },
  {
    "title":"Hello, World!",
    "publishedDate":"2017-02-10",
    "author":"Morgan",
    "postContent":"<p>We're about a month and a half into 2017 and I've spent the entirety of the new year on an adventure that's been in the works for a long time: learning to code.</p><p>As I trace my meandering 12 year career, I can see that I was beating a slow, uneven path towards technical work. Right out of college I started out as a print production artist because I had experience with InDesign as an editor of my college newspaper. I had graduated with a Studio Art major and thought graphic design would be a great practical application of my degree. My subsequent roles were, in chronological order, print designer, e-learning illustrator, front-end production developer, UX designer to a technical program manager. I cringe a little bit seeing just how many roles I had, and how different they all were, but I was following a thread.</p><p>My last role as a technical program manager was hands-down my favorite. When I accepted it, it had initially felt like a detour because I ultimately planned on returning to UX design. Once I started, though, I was an enthusiastic sponge for what my new role could teach me. I immersed myself in the software development lifecycle process, I upgraded my team's productivity processes and tools, I taught myself how to write great documentation, and I leveraged my user-centered design background to keep the focus on the end user. I was mentored by some amazing managers who taught me skills that don't come as naturally to me, like leading meetings and organizing people.</p><p>Once I had gotten all these pieces in place for my team, I realized I still had a deep craving to better understand what my team was producing. The thread I'd been following emerged as a full-blown pattern, and made the next step clear to me: I needed to understand the code.</p><p>I was about three months into teaching myself JavaScript when my team was dissolved, in November of last year. Even though it had been my favorite role, it was by no means perfect and my team had occupied a precarious political position for over a year. I was sad but excited - it was a rare opportunity to really get the education I wanted without any guilt for leaving a steady job.</p><p>So I signed up for an immersive coding bootcamp, Code Fellows. It's taken me up until now to adjust to the bootcamp lifestyle, but I'm ready to start doing what I'd intended all along - to document what I'm learning for myself and share my process along the way. Thank you for joining me!</p>",
    "category":"career"
  },
  {
    "title":"Review: my first month at bootcamp",
    "publishedDate":"2017-02-11",
    "author":"Morgan",
    "postContent":"<p>I was too overwhelmed to start documenting my journey during my first class, so this is a summary of my first bootcamp class by week.</p><p><strong>Week 1</strong>: This week was a total blur. My brain was so excited to be playing with code puzzles all day long that I neglected my physical existence. I would sit for hours staring at my computer screen and would feel blind by the time I left the building to catch my bus because my focal point had been fixed for so long. We focused on our computer setup - all getting the same text editor, getting comfortable with the terminal, an intro to git and GitHub, an intro to basics in HTML, CSS, and JS (nothing that went beyond the pre-work, really), but I’ll admit that my knowledge was tested as soon as we got our first assignments.</p><p><strong>Week 2</strong>: We delved more into objects and object constructors this week, as well as the concept of the DOM (Document Object Model). We used vanilla JavaScript to do any combination of creating, getting, setting, appending, and removing DOM elements - empowering and also majorly tedious. I think the TAs struggled to help us because it’s pretty unusual to NOT leverage a library like jQuery or React to do this kind of work. On a personal note, I got sick this week and stayed home a day and a half. I actually did better and faster work from home!</p><p><strong>Week 3</strong>: This week felt a bit more random - we had a more complex lab that required us to use localStorage, a js library (charts.js) and make more of an effort with user experience and user interface. The UX/UI material pretty light-weight. At the end of the week, we were put into groups for our upcoming project week and did quite a bit of project planning. I was truly grateful for my TPM and UX experience at that point! Our group decided to make a memory game using memes as content.</p><p><strong>Week 4</strong>: This week was surprisingly difficult - don’t know why I expected any different from group project week! I felt like my project team had done a great job getting organized and ready the week before, but when it came to execution we didn’t divide the work very well and it created knowledge silos. Our project was on the more complex side of things, and we kept running into the limits of our knowledge. We refactored our code completely because of a bug, only to find that the problem with it was a DOM change happening so quickly it looked like it wasn’t happening and we needed a timer. After getting to our minimum viable product, one of our teammates found a critical bug involving the timer that we just didn’t know how to fix. We dragged ourselves across the finish line. But I learned a lot :)</p>",
    "category":"code fellows,201"
  },
  {
    "title":"Last week at bootcamp, vol. 3",
    "publishedDate":"2017-02-26",
    "author":"Morgan",
    "postContent": "<p><strong>Theme of the week: CONTROLLER</strong></p><p><strong>Monday:</strong> Morning lab. My partner and I managed to breeze through it, thanks to some functional programming and array methods review I did over the weekend. We began talking about client-side routing and using page.js.</p><p><strong>Tuesday</strong>: REST day - not literally, unfortunately! I continued to be worn out from the madness of last week. We did make a call to our first API, which was (fittingly), GitHub's.</p><p><strong>Wednesday</strong>: Had a leisurely morning at home that turned into a major refactor session on my portfolio project (aka, this blog!) I moved my scripts into directories following the MVC pattern. Bused downtown in time for lunch with Arthur and Laurie, who are both so shell-shocked from their Amazon jobs - not because they are worked to the ground, but because the sheer scope of what they could and should be doing is so difficult to get a handle on. Class was on deployment in Heroku and I learned some cool things about environmental variables.</p><p><strong>Thursday</strong>: Lunch with Allan and Greg and I generally understood what they were saying about technology! A momentous occasion that I shared with my classmates, as it applied to them as well. We really have learned a lot. Today&rsquo;s lecture was on middleware and learning about app state. The demo was pretty rushed because the instructor had a time conflict, and I don&rsquo;t feel like I retained much. The demo was a cool idea - making the url reflect user actions and application state and the converse - I just need to go back and review.</p><p><strong>Friday</strong>: Woke up cranky but day turned out okay. Our class hit a spot of group selection drama yesterday - we were supposed to pick our own groups but our class didn&rsquo;t magically divide itself into the right number of groups of fours and threes and there were two students without a full group. Emotions ran high and I just felt like staying home. (Obviously I did not.) And I&rsquo;m glad I didn&rsquo;t - the atmosphere was better, the instructor brought his dog and gave a great lecture that was focused on addressing student questions. The functional programming review was specially strong and I learned quite a bit more about stateless/pure functions. Love me some theory!</p><p>Then we broke into our groups. My group is focusing on presenting the connection between crime and the lunar cycle using APIs, a JavaScript chart library and possibly React.</p><p><strong>Weekend</strong>: I got sick on Saturday and thought I&rsquo;d work on some lower-stakes stuff. I took the practice quiz and unexpectedly nailed it (!) and drove myself crazy figuring out how to parse the data returned from postgres so I could add categories to my blog posts. Thankfully I woke up more chipper on Sunday, took the 401 entrance exam and did decently well. I missed two $#@%@ jQuery questions that I had worked on locally and in the browser, so I&rsquo;m going to get clarification on those. Finished more work on my portfolio and deployed it. The rest of the day will be devoted to group project stuff!</p><p>Concepts and technologies:</p><ul><li>Routing</li><li>Client-side routing</li><li>REST</li><li>application state</li><li>page.js</li><li>express-proxy-request</li><li>APIs</li><li>middleware</li></ul><p>Interesting tidbits:</p><ul><li>Pure/stateless functions only take and return values. They avoid storage or altering data outside their scope, and the same input always generates the same output. This is beneficial because it reduces memory needs and avoids intermediate states and unintended side effects.</li></ul><p>Things to follow up on:</p><ul><li>page.js</li></ul>",
    "category":"code fellows,301,week in review"
  }

]
